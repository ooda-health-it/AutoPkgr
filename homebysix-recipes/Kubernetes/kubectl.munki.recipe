<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Description</key>
	<string>Downloads the latest version of kubectl, creates a package, and imports the package into your Munki repo.</string>
	<key>Identifier</key>
	<string>com.github.homebysix.munki.kubectl</string>
	<key>Input</key>
	<dict>
		<key>MUNKI_REPO_SUBDIR</key>
		<string>apps/kubectl</string>
		<key>NAME</key>
		<string>kubectl</string>
		<key>pkginfo</key>
		<dict>
			<key>catalogs</key>
			<array>
				<string>testing</string>
			</array>
			<key>description</key>
			<string>The Kubernetes command-line tool, kubectl, allows you to run commands against Kubernetes clusters. You can use kubectl to deploy applications, inspect and manage cluster resources, and view logs.</string>
			<key>developer</key>
			<string>Kubernetes</string>
			<key>name</key>
			<string>%NAME%</string>
			<key>unattended_install</key>
			<true/>
			<key>unattended_uninstall</key>
			<true/>
		</dict>
	</dict>
	<key>MinimumVersion</key>
	<string>1.1</string>
	<key>ParentRecipe</key>
	<string>com.github.homebysix.pkg.kubectl</string>
	<key>Process</key>
	<array>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>faux_root</key>
				<string>%RECIPE_CACHE_DIR%/pkgroot</string>
				<key>installs_item_paths</key>
				<array>
					<string>/usr/local/bin/kubectl</string>
				</array>
			</dict>
			<key>Processor</key>
			<string>MunkiInstallsItemsCreator</string>
		</dict>
		<dict>
			<key>Processor</key>
			<string>MunkiPkginfoMerger</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>additional_pkginfo</key>
				<dict>
					<key>installcheck_script</key>
					<string>#!/usr/bin/python

import os
import subprocess
import sys
from distutils.version import LooseVersion

kubectl = "/usr/local/bin/kubectl"
offered_version = "%version%"

if not os.path.isfile(kubectl):
    sys.exit(1)

installed_version = subprocess.check_output([kubectl, "version", "--short", "--client"])
if "Client Version" not in installed_version:
    sys.exit(1)

installed_version = installed_version.replace("Client Version: v", "").strip()
print("kubectl installed version: %s" % installed_version)

sys.exit(int(LooseVersion(offered_version) &lt;= LooseVersion(installed_version)))
</string>
				</dict>
			</dict>
			<key>Processor</key>
			<string>MunkiPkginfoMerger</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>repo_subdirectory</key>
				<string>%MUNKI_REPO_SUBDIR%</string>
			</dict>
			<key>Processor</key>
			<string>MunkiImporter</string>
		</dict>
	</array>
</dict>
</plist>
